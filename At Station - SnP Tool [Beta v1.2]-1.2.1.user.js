// ==UserScript==
// @name         At Station - SnP Tool [Beta v1.2]
// @namespace    https://phonetool.amazon.com/users/satikaa
// @version      1.2.1
// @author       Aivaras Satikas
// @description  Enhanced tool for SCC to search and print at station shipments. [Beta]
// @match        https://*/station/dashboard/*
// @grant        none
// @icon         https://www.google.com/s2/favicons?sz=64&domain=amazon.com
// ==/UserScript==

//========================================================================================================================================================\\
//                                     This tool is made to print At Station shipments for associates
//                                 It will automatically check if shipment was processed in Problem Solve
//                                      It can print selected or entire page of At Station shipments
//                                                         Created for DHE1
//========================================================================================================================================================\\

(function() {
    'use strict';
    const atsStyles = `
    :root { --background-light: #f0f4f8; --background-dark: #121212; --text-light: #1c1c1e; --text-dark: #e5e5e5; --primary-light: #7385a8; --primary-dark: #923fda; --secondary-light: #7385a8; --secondary-dark: #695e73; --accent-light: #3770b9; --accent-dark: #bc2ee9; --box-bg-light: #ffffff; --box-bg-dark: #1e1e1e; --box-text-light: #1c1c1e; --box-text-dark: #e5e5e5; --panel-bg-light: #ffffff; --panel-bg-dark: #1e1e1e; --shadow-light: rgba(0,0,0,0.1); --shadow-dark: rgba(255,255,255,0.1); --primary-color: #B4F078; --notification-bg: #ff3b30; --notification-text: #fff; }
    .ats-container { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; background-color: var(--background-light); color: var(--text-light); transition: background-color 0.5s, color 0.5s; padding: 20px; min-height: 100vh; }
    .ats-container.dark-mode { background-color: var(--background-dark); color: var(--text-dark); }
    .ats-button { background-color: var(--secondary-light); color: #fff; border: none; padding: 10px 20px; border-radius: 12px; font-size: 14px; font-weight: 600; cursor: pointer; transition: background-color 0.3s ease, box-shadow 0.3s ease; box-shadow: 0 2px 8px var(--shadow-light); text-align: center; margin: 0 5px; }
    .ats-button:hover { box-shadow: 0 4px 12px var(--shadow-light); }
    .dark-mode .ats-button { background-color: var(--secondary-dark); box-shadow: 0 2px 8px var(--shadow-dark); }
    .dark-mode .ats-button:hover { box-shadow: 0 4px 12px var(--shadow-dark); }
    .ats-tab-container { display: flex; justify-content: space-around; background-color: rgba(255,255,255,0.8); backdrop-filter: blur(15px); border-radius: 15px; padding: 8px; margin-bottom: 20px; box-shadow: 0 4px 16px var(--shadow-light); transition: background-color 0.5s, box-shadow 0.5s; }
    .dark-mode .ats-tab-container { background-color: rgba(18,18,18,0.8); box-shadow: 0 4px 16px var(--shadow-dark); }
    .ats-tab { background: none; border: none; padding: 10px 20px; font-size: 16px; font-weight: 600; color: var(--text-light); cursor: pointer; transition: background-color 0.3s ease, color 0.3s ease; border-radius: 10px; position: relative; overflow: hidden; flex: 1; margin: 0 3px; background-color: transparent; border: 2px solid transparent; }
    .dark-mode .ats-tab { color: var(--text-dark); }
    .ats-tab::before { content: ''; position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: var(--primary-light); opacity: 0; transition: opacity 0.3s ease; z-index: -1; }
    .dark-mode .ats-tab::before { background-color: var(--primary-dark); }
    .ats-tab:hover::before { opacity: 0.15; }
    .ats-tab.active::before { opacity: 1; }
    .ats-content { background-color: var(--panel-bg-light); color: var(--text-light); backdrop-filter: blur(15px); border-radius: 15px; padding: 25px; margin-top: 20px; box-shadow: 0 4px 16px var(--shadow-light); transition: background-color 0.5s, color 0.5s, box-shadow 0.5s; min-height: 400px; }
    .dark-mode .ats-content { background-color: var(--panel-bg-dark); color: var(--text-dark); box-shadow: 0 4px 16px var(--shadow-dark); }
    .ats-fade-in { animation: fadeIn 0.6s ease-in-out; }
    @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
    .ats-notification-container { position: fixed; bottom: 20px; left: 20px; width: 300px; z-index: 1000; }
    .ats-notification { background-color: var(--notification-bg); color: var(--notification-text); padding: 15px; border-radius: 8px; margin-bottom: 10px; box-shadow: 0 2px 10px var(--shadow-light); animation: slideIn 0.5s ease-out; display: flex; align-items: center; }
    @keyframes slideIn { from { opacity: 0; transform: translateX(-100%); } to { opacity: 1; transform: translateX(0); } }
    .dark-mode .ats-notification { background-color: #d32f2f; }
    .ats-notification img { width: 40px; height: auto; border-radius: 15%; margin-right: 10px; }
    .ats-search-container { margin-bottom: 20px; display: flex; justify-content: space-between; align-items: center; }
    .ats-search-input { width: 15%; padding: 12px 20px; font-size: 16px; border: none; border-radius: 12px; background-color: rgba(255,255,255,0.9); backdrop-filter: blur(10px); transition: background-color 0.5s, color 0.5s; color: var(--text-light); }
    .dark-mode .ats-search-input { background-color: rgba(18,18,18,0.9); color: var(--text-dark); }
    .ats-search-input:focus { outline: none; box-shadow: 0 0 0 3px var(--primary-light); }
    .dark-mode .ats-search-input:focus { box-shadow: 0 0 0 3px var(--primary-dark); }
    .ats-table-container { background-color: var(--panel-bg-light); padding: 15px; border-radius: 10px; box-shadow: 0px 4px 12px var(--shadow-light); width: 100%; margin-top: 10px; transition: background-color 0.5s, box-shadow 0.5s; }
    .dark-mode .ats-table-container { background-color: var(--panel-bg-dark); box-shadow: 0px 4px 12px var(--shadow-dark); }
    .ats-table-container h2 { text-align: center; color: var(--primary-color); font-size: 24px; }
    .ats-table-container table { width: 100%; text-align: center; border-collapse: collapse; }
    .ats-table-container th, .ats-table-container td { padding: 12px; text-align: center; border-bottom: 3px solid var(--text-light); font-size: 14px; vertical-align: middle; }
    .dark-mode .ats-table-container th, .dark-mode .ats-table-container td { border-bottom: 3px solid var(--text-dark); }
    .ats-table-container th { background-color: var(--box-bg-light); color: var(--text-light); font-weight: bold; cursor: pointer; }
    .dark-mode .ats-table-container th { background-color: var(--box-bg-dark); color: var(--text-dark); }
    .ats-table-container tbody tr:hover { background-color: rgba(0,122,255,0.6); cursor: pointer; }
    .ats-table-container img { border: 6px solid var(--primary-light); max-width: 40px; height: auto; border-radius: 50%; }
    .dark-mode .ats-table-container img { border: 6px solid var(--primary-dark); }
    .ats-filter-container { display: flex; justify-content: space-between; margin-bottom: 20px; flex-wrap: wrap; }
    .ats-filter-group { display: flex; align-items: center; gap: 10px; margin-bottom: 10px; }
    .ats-filter-group label { font-weight: bold; }
    .ats-pagination { display: flex; justify-content: center; margin-top: 20px; gap: 10px; }
    .ats-pagination button { padding: 8px 16px; border: none; border-radius: 8px; background-color: var(--secondary-light); color: #fff; cursor: pointer; transition: background-color 0.3s ease; }
    .dark-mode .ats-pagination button { background-color: var(--secondary-dark); }
    .ats-pagination button:disabled { background-color: #555; cursor: not-allowed; }
    .ats-print-buttons { display: flex; justify-content: flex-end; gap: 10px; margin-top: 10px; }
    .ats-print-buttons button { padding: 8px 16px; border: none; border-radius: 8px; background-color: var(--accent-light); color: #fff; cursor: pointer; transition: background-color 0.3s ease; }
    .dark-mode .ats-print-buttons button { background-color: var(--accent-dark); }
    .ats-toggle-group { display: flex; gap: 10px; }
    .ats-toggle-btn { background-color: var(--secondary-light); color: #fff; padding: 8px 16px; border: none; border-radius: 8px; font-size: 14px; font-weight: 600; cursor: pointer; transition: background-color 0.3s ease, border 0.3s ease; border: 2px solid transparent; opacity: 0.5; }
    .ats-toggle-btn.active { background-color: var(--accent-light); opacity: 1; }
    .dark-mode .ats-toggle-btn { background-color: var(--secondary-dark); }
    .dark-mode .ats-toggle-btn.active { background-color: var(--accent-dark); }
    .history-tooltip { position: absolute; background-color: var(--panel-bg-light); color: var(--text-light); padding: 10px; border: 1px solid var(--primary-light); border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.2); z-index: 1001; width: 300px; max-height: 400px; overflow-y: auto; animation: fadeIn 0.3s ease; }
    .dark-mode .history-tooltip { background-color: var(--panel-bg-dark); color: var(--text-dark); border: 1px solid var(--primary-dark); }

        .history-tooltip {
            background-color: var(--panel-bg-light);
            color: var(--text-light);
            border: 1px solid var(--primary-light);
            padding: 10px;
            border-radius: 10px;
            max-width: 600px;
            overflow-y: auto;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
        }
        .dark-mode .history-tooltip {
            background-color: var(--panel-bg-dark);
            color: var(--text-dark);
            border: 1px solid var(--primary-dark);
        }
        .history-tooltip table {
            width: 100%;
            border-collapse: collapse;
        }
        .history-tooltip th, .history-tooltip td {
            padding: 8px;
            border: 1px solid var(--text-light);
        }
        .dark-mode .history-tooltip th, .dark-mode .history-tooltip td {
            border: 1px solid var(--text-dark);
        } .ats-settings-title { font-size: 24px; text-align: center; margin-bottom: 20px; color: inherit; }
    .ats-settings-group { display: flex; flex-direction: column; gap: 10px; margin-bottom: 20px; }
    .ats-input { padding: 10px 15px; border: 1px solid #ccc; border-radius: 10px; font-size: 14px; background-color: var(--box-bg-light); color: var(--text-light); transition: background-color 0.5s, color 0.5s; }
    .dark-mode .ats-input { background-color: var(--box-bg-dark); color: var(--text-dark); }
    .ats-input:focus { outline: none; border-color: var(--primary-light); box-shadow: 0 0 0 2px var(--primary-light); }
    .dark-mode .ats-input:focus { border-color: var(--primary-dark); box-shadow: 0 0 0 2px var(--primary-dark); }
    .ats-settings-group button { align-self: flex-start; }
    .ats-settings-group input[type="color"] { width: 40px; height: 40px; border: none; cursor: pointer; }
    .ats-settings-group select { padding: 8px 12px; border: 1px solid #ccc; border-radius: 8px; background-color: var(--box-bg-light); color: var(--text-light); transition: background-color 0.5s, color 0.5s; }
    .dark-mode .ats-settings-group select { background-color: var(--box-bg-dark); color: var(--text-dark); }
    .ats-modal { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center; z-index: 1002; }
    .ats-modal-content { background-color: var(--panel-bg-light); color: var(--text-light); padding: 20px; border-radius: 10px; width: 80%; max-height: 80%; overflow-y: auto; box-shadow: 0 4px 16px rgba(0,0,0,0.2); }
    .dark-mode .ats-modal-content { background-color: var(--panel-bg-dark); color: var(--text-dark); }
    .ats-close-modal { float: right; font-size: 24px; font-weight: bold; cursor: pointer; }
    `;
    const atsInjectStyles = () => { const style = document.createElement('style'); style.textContent = atsStyles; document.head.appendChild(style); };
    const atsCreateButton = () => { if (document.getElementById('ats-tool-button')) return; const target = document.querySelector('.css-18md5b0'); if (!target) return; let sideNav = target.querySelector('.ats-side-nav'); if (!sideNav) { sideNav = document.createElement('div'); sideNav.className = 'ats-side-nav'; target.appendChild(sideNav); } const button = document.createElement('button'); button.textContent = 'At Station Search'; button.id = 'ats-tool-button'; button.className = 'ats-button'; button.style.textAlign = 'center'; button.addEventListener('click', () => { window.location.href = `${window.location.origin}/station/dashboard/AtStationSearch`; }); sideNav.appendChild(button); };
    const atsCreatePanel = () => { if (document.getElementById('ats-tool-panel')) return; const panel = document.createElement('div'); panel.id = 'ats-tool-panel'; panel.className = 'ats-container'; panel.innerHTML = `<div class="ats-tab-container"><button class="ats-tab active" data-tab="dashboard">Dashboard</button><button class="ats-tab" data-tab="performance">Associates Performance</button><button class="ats-tab" data-tab="settings">Settings</button></div><div class="ats-content ats-fade-in" id="ats-tab-content"></div><div class="ats-notification-container" id="ats-notification-container"></div>`; document.body.insertBefore(panel, document.body.firstChild); const tabContent = panel.querySelector('#ats-tab-content'), tabs = panel.querySelectorAll('.ats-tab'); tabs.forEach(tab => { tab.addEventListener('click', () => atsSwitchTab(tab.dataset.tab)); }); return { panel, tabContent, tabs }; };
    const atsSwitchTab = (tabName) => { const { tabContent, tabs } = atsPanelElements; tabs.forEach(tab => { tab.classList.toggle('active', tab.dataset.tab === tabName); }); atsShowLoading(); setTimeout(() => { if (tabName === 'dashboard') { atsDashboardModule(); } else if (tabName === 'performance') { atsPerformanceModule(); } else if (tabName === 'settings') { atsSettingsModule(); } tabContent.classList.add('ats-fade-in'); atsHideLoading(); }, 500); };
    const atsApplyTheme = (theme) => { const { panel } = atsPanelElements; if (theme === 'dark') { panel.classList.add('dark-mode'); } else { panel.classList.remove('dark-mode'); } localStorage.setItem('atsTheme', theme); };
    const atsShowLoading = () => { if (document.querySelector('.ats-loading-container')) return; const loadingContainer = document.createElement('div'); loadingContainer.className = 'ats-loading-container'; loadingContainer.innerHTML = '<div class="ats-loading-spinner">Loading...</div>'; document.body.appendChild(loadingContainer); };
    const atsHideLoading = () => { const loadingContainer = document.querySelector('.ats-loading-container'); if (loadingContainer) loadingContainer.remove(); };
    const atsInit = () => { const currentUrl = window.location.href; atsCreateButton(); if (currentUrl.includes("/station/dashboard/AtStationSearch")) { atsInjectStyles(); atsPanelElements = atsCreatePanel(); const storedTheme = localStorage.getItem('atsTheme') || 'light'; atsApplyTheme(storedTheme); atsSwitchTab('dashboard'); document.title = "At Station Search"; } };
    let atsPanelElements = {}; if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', atsInit); } else { atsInit(); }
    const exportToCSV = () => { let csvContent = "data:text/csv;charset=utf-8,Tracking ID,State,Associate ID,Size,Minutes in State,Searched\r\n"; atsFilteredData.forEach(pkg => { const isSearched = localStorage.getItem('atsSearchedTrackingIds') ? JSON.parse(localStorage.getItem('atsSearchedTrackingIds')).includes(pkg.trackingId) : false; const searchedText = isSearched ? 'Searched' : ''; const row = `${pkg.trackingId},${pkg.state},${pkg.lastScanAssociateId},${pkg.size},${pkg.minutesInState},${searchedText}`; csvContent += row + "\r\n"; }); const encodedUri = encodeURI(csvContent); const link = document.createElement('a'); link.setAttribute('href', encodedUri); link.setAttribute('download', 'data_export.csv'); document.body.appendChild(link); link.click(); document.body.removeChild(link); };
    const saveUserFilters = () => { const cluster = document.querySelector('.ats-cluster-toggle .ats-toggle-btn.active') ? document.querySelector('.ats-cluster-toggle .ats-toggle-btn.active').dataset.cluster : 'A'; const size = document.querySelector('.ats-size-toggle .ats-toggle-btn.active') ? document.querySelector('.ats-size-toggle .ats-toggle-btn.active').dataset.size : 'ALL'; const status = document.querySelector('.ats-status-toggle .ats-toggle-btn.active') ? document.querySelector('.ats-status-toggle .ats-toggle-btn.active').dataset.status : 'CURRENT_INDUCTED'; localStorage.setItem('atsUserFilters', JSON.stringify({ cluster, size, status })); };
    const applySavedFilters = () => { const savedFilters = JSON.parse(localStorage.getItem('atsUserFilters')); if (savedFilters) { if (savedFilters.cluster) { const clusterBtn = document.querySelector(`.ats-cluster-toggle .ats-toggle-btn[data-cluster="${savedFilters.cluster}"]`); if (clusterBtn) { document.querySelectorAll('.ats-cluster-toggle .ats-toggle-btn').forEach(btn => btn.classList.remove('active')); clusterBtn.classList.add('active'); } } if (savedFilters.size) { const sizeBtn = document.querySelector(`.ats-size-toggle .ats-toggle-btn[data-size="${savedFilters.size}"]`); if (sizeBtn) { document.querySelectorAll('.ats-size-toggle .ats-toggle-btn').forEach(btn => btn.classList.remove('active')); sizeBtn.classList.add('active'); } } if (savedFilters.status) { const statusBtn = document.querySelector(`.ats-status-toggle .ats-toggle-btn[data-status="${savedFilters.status}"]`); if (statusBtn) { document.querySelectorAll('.ats-status-toggle .ats-toggle-btn').forEach(btn => btn.classList.remove('active')); statusBtn.classList.add('active'); } } } };
    const updatePaginationInfo = () => { const start = (atsCurrentPage - 1) * atsRowsPerPage + 1; const end = Math.min(atsCurrentPage * atsRowsPerPage, atsFilteredData.length); document.getElementById('ats-page-info').textContent = `Showing ${start}-${end} of ${atsFilteredData.length} results`; };
    const atsDashboardModule = async () => { const tabContent = atsPanelElements.tabContent; tabContent.innerHTML = `<div class="ats-search-container"><input type="text" class="ats-search-input" placeholder="Search by Tracking ID..."><div class="ats-print-buttons"><button id="ats-print-selected" class="ats-button">Print Selected</button><button id="ats-print-all" class="ats-button">Print All</button><button id="ats-export-csv" class="ats-button">Export to CSV</button><button id="ats-send-webhook" class="ats-button">Send to Chime</button></div></div><div class="ats-filter-container"><div class="ats-filter-group"><label>Cluster:</label><div class="ats-toggle-group ats-cluster-toggle"><button class="ats-toggle-btn" data-cluster="A">A</button><button class="ats-toggle-btn" data-cluster="B">B</button><button class="ats-toggle-btn" data-cluster="C">C</button><button class="ats-toggle-btn" data-cluster="D">D</button></div></div><div class="ats-filter-group"><label>Size:</label><div class="ats-toggle-group ats-size-toggle"><button class="ats-toggle-btn" data-size="ALL">All</button><button class="ats-toggle-btn" data-size="EXTRA_SMALL">Extra Small</button><button class="ats-toggle-btn" data-size="SMALL">Small</button><button class="ats-toggle-btn" data-size="MEDIUM">Medium</button><button class="ats-toggle-btn" data-size="LARGE">Large</button><button class="ats-toggle-btn" data-size="EXTRA_LARGE">Extra Large</button><button class="ats-toggle-btn" data-size="NON_CONVEYABLE">Non Conveyable</button></div></div><div class="ats-filter-group"><label>Select Status:</label><div class="ats-toggle-group ats-status-toggle"><button class="ats-toggle-btn" data-status="CURRENT_INDUCTED">Inducted</button><button class="ats-toggle-btn" data-status="CURRENT_STOW_BUFFERED">Stow Buffered</button></div></div></div><div class="ats-settings-group"><label for="rows-per-page">Choose how many rows per page to display:</label><select id="rows-per-page"><option value="10">10</option><option value="20">20</option><option value="30" selected>30</option><option value="50">50</option><option value="100">100</option></select></div></div><div class="ats-table-container"><h2></h2><table><thead><tr><th>Select</th><th>Tracking ID</th><th>State</th><th>Associate ID</th><th id="sort-size" style="cursor: pointer;">Size</th><th id="sort-minutes" style="cursor: pointer;">Minutes in State</th><th>Searched</th><th>Actions</th></tr></thead><tbody></tbody></table></div><div class="ats-pagination"><button id="ats-prev-page">Previous</button><span id="ats-page-info">Page 1 of 1</span><button id="ats-next-page">Next</button></div>`; document.querySelectorAll('.ats-cluster-toggle .ats-toggle-btn').forEach(btn => { btn.addEventListener('click', () => atsToggleCluster(btn.dataset.cluster)); }); document.querySelectorAll('.ats-size-toggle .ats-toggle-btn').forEach(btn => { btn.addEventListener('click', () => atsToggleSize(btn.dataset.size)); }); document.querySelectorAll('.ats-status-toggle .ats-toggle-btn').forEach(btn => { btn.addEventListener('click', () => atsToggleStatus(btn.dataset.status)); }); document.getElementById('rows-per-page').addEventListener('change', () => { atsRowsPerPage = parseInt(document.getElementById('rows-per-page').value); atsCurrentPage = 1; atsRenderTable(); }); document.querySelector('.ats-search-input').addEventListener('input', atsApplyFilters); document.getElementById('ats-print-selected').addEventListener('click', atsPrintSelected); document.getElementById('ats-print-all').addEventListener('click', atsPrintAll); document.getElementById('ats-export-csv').addEventListener('click', exportToCSV); document.getElementById('ats-send-webhook').addEventListener('click', atsSendWebhook); const prevBtn = document.getElementById('ats-prev-page'); const nextBtn = document.getElementById('ats-next-page'); prevBtn.addEventListener('click', () => { if (atsCurrentPage > 1) { atsCurrentPage--; atsRenderTable(); } }); nextBtn.addEventListener('click', () => { if (atsCurrentPage < atsTotalPages) { atsCurrentPage++; atsRenderTable(); } }); atsRenderStatusToggle(); applySavedFilters(); atsApplyFilters(); };
    const atsPerformanceModule = () => { window.location.href = 'https://logistics.amazon.co.uk/station/dashboard/iSeeYou#performance'; };
    const atsSettingsModule = () => { const { tabContent } = atsPanelElements; const currentStationCode = localStorage.getItem('atsStationCode') || 'DHE1'; const currentTheme = localStorage.getItem('atsTheme') || 'light'; const currentPrimary = localStorage.getItem('atsPrimaryColor') || '#B4F078'; const currentAccent = localStorage.getItem('atsAccentColor') || '#ff2d55'; tabContent.innerHTML = `<h2 class="ats-settings-title">Settings</h2><div class="ats-settings-group"><label for="station-code-input">Station Code: </label><input id="station-code-input" class="ats-input" type="text" value="${currentStationCode}" /></div><div class="ats-settings-group"><label>Theme: </label><button id="theme-toggle" class="ats-button">${currentTheme === 'dark' ? 'Light Mode' : 'Dark Mode'}</button></div><div class="ats-settings-group"><label for="custom-primary-color">Primary Color:</label><input type="color" id="custom-primary-color" value="${currentPrimary}" /></div><div class="ats-settings-group"><label for="custom-accent-color">Accent Color:</label><input type="color" id="custom-accent-color" value="${currentAccent}" /></div><button id="save-settings" class="ats-button">Save Settings</button>`; document.getElementById('save-settings').addEventListener('click', () => { const newStationCode = document.getElementById('station-code-input').value.trim(); const primaryColor = document.getElementById('custom-primary-color').value; const accentColor = document.getElementById('custom-accent-color').value; if (newStationCode) { localStorage.setItem('atsStationCode', newStationCode); } localStorage.setItem('atsPrimaryColor', primaryColor); localStorage.setItem('atsAccentColor', accentColor); const theme = localStorage.getItem('atsTheme') || 'light'; atsApplyTheme(theme); updateCustomColors(primaryColor, accentColor); alert('Settings saved.'); }); document.getElementById('theme-toggle').addEventListener('click', () => { const newTheme = localStorage.getItem('atsTheme') === 'dark' ? 'light' : 'dark'; localStorage.setItem('atsTheme', newTheme); atsApplyTheme(newTheme); document.getElementById('theme-toggle').textContent = newTheme === 'dark' ? 'Light Mode' : 'Dark Mode'; const primaryColor = localStorage.getItem('atsPrimaryColor') || '#B4F078'; const accentColor = localStorage.getItem('atsAccentColor') || '#ff2d55'; document.getElementById('custom-primary-color').value = primaryColor; document.getElementById('custom-accent-color').value = accentColor; updateCustomColors(primaryColor, accentColor); });
    };
    const updateCustomColors = (primaryColor, accentColor) => { document.documentElement.style.setProperty('--primary-light', primaryColor); document.documentElement.style.setProperty('--primary-dark', primaryColor); document.documentElement.style.setProperty('--accent-light', accentColor); document.documentElement.style.setProperty('--accent-dark', accentColor); };
    let atsData = [], atsFilteredData = [], atsCurrentPage = 1, atsRowsPerPage = 30, atsTotalPages = 1;
    const atsFetchData = async (cluster = 'A', size = 'ALL', searchTerm = '', status = 'CURRENT_INDUCTED') => { const response = await fetch("https://logistics.amazon.co.uk/station/proxyapigateway/data", { "credentials": "include", "headers": { "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0", "Accept": "*/*", "Accept-Language": "en-US,en;q=0.5", "Content-Type": "application/json", "X-Requested-With": "XMLHttpRequest", "Sec-Fetch-Dest": "empty", "Sec-Fetch-Mode": "cors", "Sec-Fetch-Site": "same-origin" }, "referrer": "https://logistics.amazon.co.uk/station/dashboard/stowv2", "body": `{"resourcePath":"svs/packages/data","httpMethod":"post","processName":"stow","requestBody":{"filters":{"NODE":["${localStorage.getItem('atsStationCode') || 'DHE1'}"],"PACKAGE_STATUS":["${status}"],"CLUSTER":["${cluster}"],"CYCLE":["CYCLE_1"],"DRS":["FALSE"]}}}`, "method": "POST", "mode": "cors" }); const data = await response.json(); atsData = data.packages || []; atsFilteredData = atsData.filter(pkg => { const matchesSize = size === 'ALL' || pkg.size.toUpperCase() === size; const matchesSearch = pkg.trackingId.toLowerCase().includes(searchTerm); return matchesSize && matchesSearch; }); atsFilteredData.sort((a, b) => a.minutesInState - b.minutesInState); atsTotalPages = Math.ceil(atsFilteredData.length / atsRowsPerPage) || 1; atsRenderTable(); };
    const showError = (message) => { const errorContainer = document.createElement('div'); errorContainer.style.position = 'fixed'; errorContainer.style.top = '20px'; errorContainer.style.right = '20px'; errorContainer.style.backgroundColor = '#ff4d4d'; errorContainer.style.color = '#fff'; errorContainer.style.padding = '15px'; errorContainer.style.borderRadius = '8px'; errorContainer.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.2)'; errorContainer.style.zIndex = '1000'; errorContainer.innerText = message; document.body.appendChild(errorContainer); setTimeout(() => { errorContainer.remove(); }, 5000); };
    const atsRenderStatusToggle = () => { const statusContainer = document.querySelector('.ats-status-toggle'); if (!statusContainer) { const newStatusContainer = document.createElement('div'); newStatusContainer.className = 'ats-status-toggle'; newStatusContainer.innerHTML = `<button class="ats-toggle-btn" data-status="CURRENT_INDUCTED">Inducted</button><button class="ats-toggle-btn" data-status="CURRENT_STOW_BUFFERED">Stow Buffered</button>`; document.querySelector('.ats-filter-container').appendChild(newStatusContainer); } else { console.log('Status toggle buttons already rendered, skipping duplication.'); } document.querySelectorAll('.ats-status-toggle .ats-toggle-btn').forEach(btn => { btn.addEventListener('click', () => atsToggleStatus(btn.dataset.status)); }); atsToggleStatus(localStorage.getItem('atsStatus') || 'CURRENT_INDUCTED'); };
    const atsToggleStatus = (status) => { localStorage.setItem('atsStatus', status); document.querySelectorAll('.ats-status-toggle .ats-toggle-btn').forEach(btn => { btn.classList.toggle('active', btn.dataset.status === status); }); atsApplyFilters(); };
    const atsToggleCluster = (cluster) => { document.querySelectorAll('.ats-cluster-toggle .ats-toggle-btn').forEach(btn => { btn.classList.toggle('active', btn.dataset.cluster === cluster); }); atsApplyFilters(); };
    const atsToggleSize = (size) => { document.querySelectorAll('.ats-size-toggle .ats-toggle-btn').forEach(btn => { btn.classList.toggle('active', btn.dataset.size === size); }); atsApplyFilters(); };
    const atsRenderTable = async () => { const tbody = document.querySelector('.ats-table-container tbody'); const thead = document.querySelector('.ats-table-container thead'); const problemSolveData = await atsCheckProblemSolve(); const problemSolveIds = problemSolveData.map(item => item.scannableId); thead.innerHTML = `<tr><th>Select</th><th>Tracking ID</th><th>State</th><th>Associate ID</th><th id="sort-size" style="cursor: pointer;">Size</th><th id="sort-minutes" style="cursor: pointer;">Minutes in State</th><th>Searched</th><th>Actions</th></tr>`; document.getElementById('sort-size').addEventListener('click', () => { sortOrder.size = sortOrder.size === 'asc' ? 'desc' : 'asc'; atsSortData('size', sortOrder.size); }); document.getElementById('sort-minutes').addEventListener('click', () => { sortOrder.minutesInState = sortOrder.minutesInState === 'asc' ? 'desc' : 'asc'; atsSortData('minutesInState', sortOrder.minutesInState); }); tbody.innerHTML = ''; const start = (atsCurrentPage - 1) * atsRowsPerPage; const end = start + atsRowsPerPage; const pageData = atsFilteredData.slice(start, end); pageData.forEach(pkg => { const isProblemSolved = problemSolveIds.includes(pkg.trackingId); const isSearched = localStorage.getItem('atsSearchedTrackingIds') ? JSON.parse(localStorage.getItem('atsSearchedTrackingIds')).includes(pkg.trackingId) : false; const searchedText = isSearched ? 'Searched' : ''; const row = document.createElement('tr'); row.innerHTML = `<td><input type="checkbox" class="ats-row-select" data-tracking-id="${pkg.trackingId}"></td><td class="ats-tracking-id" data-tracking-id="${pkg.trackingId}">${pkg.trackingId}</td><td>${pkg.state}</td><td>${pkg.lastScanAssociateId}<img src="https://internal-cdn.amazon.com/badgephotos.amazon.com/?login=${pkg.lastScanAssociateId}" alt="${pkg.lastScanAssociateId} Badge" style="width:30px;height:30px;border-radius:50%;margin-left:5px;"></td><td>${pkg.size}</td><td>${pkg.minutesInState}</td><td>${searchedText}</td><td><button class="ats-action-button" data-action="print" data-tracking-id="${pkg.trackingId}">Print</button><button class="ats-action-button" data-action="view-history" data-tracking-id="${pkg.trackingId}">View History</button><button class="ats-action-button" data-action="send-chime" data-tracking-id="${pkg.trackingId}">Send to Chime</button></td>`; if (isProblemSolved) { row.style.backgroundColor = 'red'; } row.addEventListener('click', (e) => { if (!e.target.classList.contains('ats-action-button') && !e.target.classList.contains('ats-row-select')) { atsDisplayHistoryModal(pkg.trackingId); } }); row.querySelectorAll('.ats-action-button').forEach(button => { button.addEventListener('click', (e) => { e.stopPropagation(); const action = button.dataset.action; const trackingId = button.dataset.trackingId; if (action === 'print') { atsPrintTrackingId(trackingId); } else if (action === 'send-chime') { atsSendToChime(trackingId); } else if (action === 'view-history') { atsDisplayHistoryModal(trackingId); } }); }); tbody.appendChild(row); }); document.getElementById('ats-page-info').textContent = `Page ${atsCurrentPage} of ${atsTotalPages}`; document.getElementById('ats-prev-page').disabled = atsCurrentPage === 1; document.getElementById('ats-next-page').disabled = atsCurrentPage === atsTotalPages; };
    const atsCheckProblemSolve = async () => { const today = new Date(); const startOfDay = new Date(today.setHours(0, 0, 0, 0)).getTime() / 1000; const endOfDay = new Date(today.setHours(23, 59, 59, 999)).getTime() / 1000; const stationCode = localStorage.getItem('atsStationCode') || 'DHE1'; try { const response = await fetch("https://logistics.amazon.co.uk/station/proxyapigateway/data", { "credentials": "include", "headers": { "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0", "Accept": "*/*", "Accept-Language": "en-US,en;q=0.5", "Content-Type": "application/json", "X-Requested-With": "XMLHttpRequest", "Sec-Fetch-Dest": "empty", "Sec-Fetch-Mode": "cors", "Sec-Fetch-Site": "same-origin" }, "referrer": "https://logistics.amazon.co.uk/station/dashboard/problemsolve", "body": `{"resourcePath":"/nevs/nevs/getExceptionShipments","httpMethod":"post","processName":"exceptions","requestBody":{"categories":["DAMAGED_PACKAGE"],"targetStatus":"RESOLVED","startDate":${startOfDay},"endDate":${endOfDay},"returnPaginationIndex":true,"shipmentDetailsRequired":true,"paginationKey":null,"stationCode":"${stationCode}"}}}`, "method": "POST", "mode": "cors" }); const problemSolveData = await response.json(); return problemSolveData.exceptionShipments || []; } catch (error) { showError('Failed to fetch Problem Solve data.'); return []; } };
    const sortOrder = { size: 'asc', minutesInState: 'asc' };
    const atsSortData = (key, order) => { atsFilteredData.sort((a, b) => { const aVal = key === 'size' ? a.size.toUpperCase() : a.minutesInState; const bVal = key === 'size' ? b.size.toUpperCase() : b.minutesInState; if (aVal < bVal) return order === 'asc' ? -1 : 1; if (aVal > bVal) return order === 'asc' ? 1 : -1; return 0; }); atsRenderTable(); };
    const atsApplyFilters = async () => { const cluster = document.querySelector('.ats-cluster-toggle .ats-toggle-btn.active') ? document.querySelector('.ats-cluster-toggle .ats-toggle-btn.active').dataset.cluster : 'A'; const size = document.querySelector('.ats-size-toggle .ats-toggle-btn.active') ? document.querySelector('.ats-size-toggle .ats-toggle-btn.active').dataset.size : 'ALL'; const status = document.querySelector('.ats-status-toggle .ats-toggle-btn.active') ? document.querySelector('.ats-status-toggle .ats-toggle-btn.active').dataset.status : 'CURRENT_INDUCTED'; const searchTerm = document.querySelector('.ats-search-input').value.trim().toLowerCase(); atsCurrentPage = 1; saveUserFilters(); await atsFetchData(cluster, size, searchTerm, status); atsRenderTable(); };
    document.addEventListener('DOMContentLoaded', () => { applySavedFilters(); atsApplyFilters(); });
    const atsDisplayHistoryModal = async (trackingId) => { const historyData = await fetchHistoryData(trackingId); if (!historyData) { showError('No history data available.'); return; } const modal = document.createElement('div'); modal.className = 'ats-modal'; modal.innerHTML = `<div class="ats-modal-content"><span class="ats-close-modal">&times;</span><h2>History for Tracking ID: ${trackingId}</h2>${createHistoryTable(historyData).outerHTML}</div>`; document.body.appendChild(modal); modal.querySelector('.ats-close-modal').addEventListener('click', () => { modal.remove(); }); modal.addEventListener('click', (e) => { if (e.target === modal) { modal.remove(); } }); };
    const createHistoryTable = (hist) => { const table = document.createElement('table'); table.className = 'enhanced-scc-table enhanced-scc-history-table'; const headers = ['Date', 'State', 'Reason', 'Associate', 'Operation', 'Source', 'Destination', 'Scan Container', 'Scan Location', 'Cycle', 'Route Code', 'Manifest Route Code', 'Sort Zone', 'Driver ID', 'Driver Name']; const thead = document.createElement('thead'); const headerRow = document.createElement('tr'); headers.forEach(h => { const th = document.createElement('th'); th.textContent = h; headerRow.appendChild(th); }); thead.appendChild(headerRow); table.appendChild(thead); const tbody = document.createElement('tbody'); const sortedHist = hist.sort((a, b) => new Date(b.stateTime) - new Date(a.stateTime)); sortedHist.forEach(item => { const tr = document.createElement('tr'); tr.className = item.packageState.toLowerCase().replace(/ /g, '_'); ['stateTime', 'packageState', 'reasonCode', 'scanAssociate', 'operation', 'source', 'destination', 'scanContainer', 'scanLocation', 'cycle', 'routeCode', 'manifestRouteCode', 'sortZone', 'driverId', 'driverName'].forEach(key => { const td = document.createElement('td'); if (key === 'stateTime') td.textContent = item[key] ? new Date(item[key]).toLocaleString() : '-'; else if (key === 'operation') td.textContent = (item[key] || []).join(', ') || '-'; else td.textContent = item[key] || '-'; tr.appendChild(td); }); const associateCell = tr.children[3]; const scanAssociate = item.scanAssociate || '-'; const username = scanAssociate.includes('@') ? scanAssociate.split('@')[0] : scanAssociate; if (/^[a-z]+$/.test(username)) { const badgeLink = document.createElement('a'); badgeLink.href = `https://fclm-portal.amazon.com/employee/ppaTimeDetails?employeeId=${username}`; badgeLink.target = '_blank'; const badgeImg = document.createElement('img'); badgeImg.src = `https://internal-cdn.amazon.com/badgephotos.amazon.com/?login=${username}`; badgeImg.alt = `${username} Badge`; badgeImg.loading = 'lazy'; badgeImg.style.width = '30px'; badgeImg.style.height = '30px'; badgeImg.style.borderRadius = '50%'; badgeImg.style.marginRight = '5px'; badgeLink.appendChild(badgeImg); const nameSpan = document.createElement('span'); nameSpan.textContent = username; associateCell.innerHTML = ''; associateCell.appendChild(badgeLink); associateCell.appendChild(nameSpan); } tbody.appendChild(tr); }); table.appendChild(tbody); return table; };
    const fetchHistoryData = async (packageId) => { try { const response = await fetch(`https://${location.host}/station/proxyapigateway/data`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, credentials: 'include', body: JSON.stringify({ "resourcePath": "/os/getPackageHistoryData", "httpMethod": "post", "processName": "oculus", "requestBody": { "packageId": packageId, "pageSize": 100, "pageToken": null, "startTime": null, "endTime": null } }) }); const data = await response.json(); return data.packageHistory || null; } catch (error) { showError('Failed to fetch history data.'); return null; } };
    const atsPrintSelected = () => { const checkboxes = document.querySelectorAll('.ats-row-select:checked'); if (checkboxes.length === 0) { alert('No rows selected for printing.'); return; } let printContent = ''; checkboxes.forEach((cb, index) => { const row = cb.closest('tr'); const trackingId = row.children[1].textContent; const minutesInState = row.children[5].textContent; const size = row.children[4].textContent; printContent += `<div style="${index !== 0 ? 'page-break-before: always;' : ''} display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100vh; width: 100vw; font-weight: bold;"><h2 style="font-size: 9vw; margin: 5px; font-weight: bolder;">Tracking ID: ${trackingId}</h2><p style="font-size: 7vw; margin: 5px 0; font-weight: bold;">Minutes in State: ${minutesInState}</p><p style="font-size: 6vw; margin: 5px 0; font-weight: bold;">Size: ${size}</p></div>`; }); const printWindow = window.open('', '', 'height=400,width=600'); printWindow.document.write('<html><head><title>Print</title><style>body { margin: 0; padding: 0; }</style></head><body>' + printContent + '</body></html>'); printWindow.document.close(); printWindow.focus(); printWindow.print(); printWindow.close(); };
    const atsPrintAll = () => { const tbody = document.querySelector('.ats-table-container tbody'); const rows = tbody.querySelectorAll('tr'); if (rows.length === 0) { alert('No data available to print.'); return; } let printContent = ''; rows.forEach((row, index) => { const trackingId = row.children[1].textContent; const minutesInState = row.children[5].textContent; const size = row.children[4].textContent; printContent += `<div style="${index !== 0 ? 'page-break-before: always;' : ''} display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100vh; width: 100vw; font-weight: bold;"><h2 style="font-size: 9vw; margin: 5px; font-weight: bolder;">Tracking ID: ${trackingId}</h2><p style="font-size: 7vw; margin: 5px 0; font-weight: bold;">Minutes in State: ${minutesInState}</p><p style="font-size: 6vw; margin: 5px 0; font-weight: bold;">Size: ${size}</p></div>`; }); const printWindow = window.open('', '', 'height=400,width=600'); printWindow.document.write('<html><head><title>Print</title><style>body { margin: 0; padding: 0; }</style></head><body>' + printContent + '</body></html>'); printWindow.document.close(); printWindow.focus(); printWindow.print(); printWindow.close(); };
    const atsSendWebhook = () => { const selectedTrackingIds = Array.from(document.querySelectorAll('.ats-row-select:checked')).map(cb => cb.dataset.trackingId); if (selectedTrackingIds.length === 0) { alert('No tracking IDs selected for sending to Chime.'); return; } const dataToSend = selectedTrackingIds.map(id => { const pkg = atsData.find(p => p.trackingId === id); return pkg ? { trackingId: pkg.trackingId, state: pkg.state, associateId: pkg.lastScanAssociateId, size: pkg.size, minutesInState: pkg.minutesInState } : { trackingId: id }; }); fetch("https://hooks.chime.aws/incomingwebhooks/08210658-d83a-434e-a4d6-0c0bd086f21d?token=MGlpOW5uRHF8MXxVWDBCN0JGZVVoQzM1cEpQeVNHay1mUXNSRWpIbkduSUtDdlRMdWgxd2NN", { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ records: dataToSend }) }).then(response => { if (response.ok) { alert('Data sent successfully to Chime webhook.'); } else { showError('Failed to send data to Chime webhook.'); } }).catch(error => { showError('Error sending data to Chime webhook.'); }); };
    const atsPrintTrackingId = (trackingId) => { const pkg = atsData.find(p => p.trackingId === trackingId); if (!pkg) { alert('Package data not found.'); return; } const printContent = `<div style="display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100vh; width: 100vw; font-weight: bold;"><h2 style="font-size: 9vw; margin: 5px; font-weight: bolder;">Tracking ID: ${pkg.trackingId}</h2><p style="font-size: 7vw; margin: 5px 0; font-weight: bold;">Minutes in State: ${pkg.minutesInState}</p><p style="font-size: 6vw; margin: 5px 0; font-weight: bold;">Size: ${pkg.size}</p></div>`; const printWindow = window.open('', '', 'height=400,width=600'); printWindow.document.write('<html><head><title>Print</title><style>body { margin: 0; padding: 0; }</style></head><body>' + printContent + '</body></html>'); printWindow.document.close(); printWindow.focus(); printWindow.print(); printWindow.close(); };
    const atsSendToChime = (trackingId) => { const pkg = atsData.find(p => p.trackingId === trackingId); if (!pkg) { alert('Package data not found.'); return; } const dataToSend = pkg ? { trackingId: pkg.trackingId, state: pkg.state, associateId: pkg.lastScanAssociateId, size: pkg.size, minutesInState: pkg.minutesInState } : { trackingId: trackingId }; fetch("https://hooks.chime.aws/incomingwebhooks/08210658-d83a-434e-a4d6-0c0bd086f21d?token=MGlpOW5uRHF8MXxVWDBCN0JGZVVoQzM1cEpQeVNHay1mUXNSRWpIbkduSUtDdlRMdWgxd2NN", { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ records: [dataToSend] }) }).then(response => { if (response.ok) { alert('Data sent successfully to Chime webhook.'); } else { showError('Failed to send data to Chime webhook.'); } }).catch(error => { showError('Error sending data to Chime webhook.'); }); };
    const atsMarkAsSearched = (trackingId, row) => { let searchedTrackingIds = localStorage.getItem('atsSearchedTrackingIds') ? JSON.parse(localStorage.getItem('atsSearchedTrackingIds')) : []; if (!searchedTrackingIds.includes(trackingId)) { searchedTrackingIds.push(trackingId); row.querySelector('td:nth-child(7)').textContent = 'Searched'; } localStorage.setItem('atsSearchedTrackingIds', JSON.stringify(searchedTrackingIds)); };
    const atsDisplayHistory = (trackingId, row) => { fetchHistoryData(trackingId).then(historyData => { displayHistoryTable(historyData, row.querySelector('.ats-tracking-id')); }); };
    const displayHistoryTable = (hist, targetElement) => { if (hist.length === 0) { showError('No history data available.'); return; } const tooltip = document.createElement('div'); tooltip.className = 'history-tooltip'; tooltip.style.position = 'absolute'; tooltip.style.top = `${targetElement.getBoundingClientRect().bottom + window.scrollY + 5}px`; tooltip.style.left = `${targetElement.getBoundingClientRect().left + window.scrollX}px`; tooltip.style.width = 'auto'; tooltip.style.height = 'auto'; tooltip.style.maxWidth = '100%'; tooltip.style.maxHeight = '100%'; tooltip.style.overflow = 'auto'; tooltip.style.padding = '10px'; tooltip.style.border = '2px solid'; tooltip.style.borderRadius = '10px'; tooltip.style.boxShadow = '0px 4px 16px rgba(0,0,0,0.1)'; tooltip.style.backgroundColor = 'var(--panel-bg-light)'; tooltip.style.color = 'var(--text-light)'; tooltip.style.zIndex = '1000'; const table = createHistoryTable(hist); tooltip.appendChild(table); document.body.appendChild(tooltip); const removeTooltip = (e) => { if (!tooltip.contains(e.target)) { tooltip.remove(); document.removeEventListener('click', removeTooltip); } }; document.addEventListener('click', removeTooltip); };
})();
